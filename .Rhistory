y_hat <- 9999
e <- 9999
while(e > e_max && n_iteration <= max_iteration){
for(i in 1:p){
y_hat[i] <- sigmoid(sum(x[i,]*w)+b)
w <- w - (a * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b) * x[i,])
b <- b - (a * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b))
}
e <- 1/length(y_hat) * 1/2 * sum((y_hat - y)^2)
n_iteration <- n_iteration + 1
}
return(list(n_iteration-1,w,b))
}
result <- setting_w_and_b(0.1,x,y,100000,0.001)
result
for(i in 1:nrow(x)){
print(sigmoid(sum(x[i,] * result[[2]]) + result[[3]]))
}
setwd("~/")
setwd("C:/Users/soymi/Desktop/git")
library(doParallel)
library(parallel)
x <- data.frame(rbind(c(0,0,0,0),
c(0,1,1,1),
c(0,1,0,1),
c(0,0,1,1),
c(1,0,1,0),
c(1,1,1,1)))
y <- c(1,0,0,0,0,0)
sigmoid <- function(x){
return(1 / (1 + exp(-x)))
}
sigmoid_prime <- function(x){
return(sigmoid(x) * (1 - sigmoid(x)))
}
library(doParallel)
library(parallel)
#setting weights and bias of perceptron
#activation function : sigmoid function
#batch learning, parallel computing
# a = learning rate
# x = input data
# y = label
# i = max iteration
# e_max = max error
a <- list()
a
#setting weights and bias of perceptron
#activation function : sigmoid function
#batch learning, parallel computing
# a = learning rate
# x = input data
# y = label
# i = max iteration
# e_max = max error
a <- matrix(ncol = 2,nrow = 4)
a
a[1,] <- c(1,4)
a
#setting weights and bias of perceptron
#activation function : sigmoid function
#batch learning, parallel computing
# a = learning rate
# x = input data
# y = label
# i = max iteration
# e_max = max error
a
a[2,] <- c(3,4)
a[3,] <- c(5,6)
a[4,] <- c(6,7)
#setting weights and bias of perceptron
#activation function : sigmoid function
#batch learning, parallel computing
# a = learning rate
# x = input data
# y = label
# i = max iteration
# e_max = max error
a
apply(a,1,mean)
apply(a,0,mean)
apply(a,2,mean)
setting_w_and_b <- function(a,x,y,i,e_max){
y_hat <- c()
p <- nrow(x)
w <- round(rnorm(ncol(x)), 3)
b <- round(rnorm(1), 3)
w_update <- matrix(nrow = nrow(x), ncol = ncol(x))
b_update <- matrix(nrow = nrow(x), ncol = 1)
n_iteration <- 1
max_iteration <- i
y_hat <- 9999
e <- 9999
while(e > e_max && n_iteration <= max_iteration){
foreach(i = 1:p, .export = c('sigmoid','sigmoid_prime')) %dopar% {
y_hat[i] <- sigmoid(sum(x[i,]*w)+b)
w_update[i,] <- w - (a * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b) * x[i,])
b_update[i,] <- b - (a * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b))
}
e <- 1/length(y_hat) * 1/2 * sum((y_hat - y)^2)
w <- apply(w_update, 2, mean)
b <- apply(b_update, 2, mean)
n_iteration <- n_iteration + 1
}
return(list(n_iteration-1,w,b))
}
result <- setting_w_and_b(0.1,x,y,100000,0.001)
setting_w_and_b <- function(a,x,y,i,e_max){
y_hat <- c()
p <- nrow(x)
w <- round(rnorm(ncol(x)), 3)
b <- round(rnorm(1), 3)
w_update <- matrix(nrow = nrow(x), ncol = ncol(x))
b_update <- matrix(nrow = nrow(x), ncol = 1)
n_iteration <- 1
max_iteration <- i
y_hat <- 9999
e <- 9999
while(e > e_max && n_iteration <= max_iteration){
foreach(i = 1:p, .export = c('sigmoid','sigmoid_prime')) %dopar% {
y_hat[i] <- sigmoid(sum(x[i,]*w)+b)
w_update[i,] <- w - (a * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b) * x[i,])
b_update[i,] <- b - (a * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b))
}
e <- 1/length(y_hat) * 1/2 * sum((y_hat - y)^2)
w <- apply(w_update, 2, mean)
b <- apply(b_update, 2, mean)
n_iteration <- n_iteration + 1
}
return(list(n_iteration-1,w,b))
}
result <- setting_w_and_b(0.1,x,y,100,0.001)
result
foreach(i = 1:ncol(x), .export = c('sigmoid','sigmoid_prime')) %dopar% {
y_hat[i] <- sigmoid(sum(x[i,]*w)+b)
w_update[i,] <- w - (a * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b) * x[i,])
b_update[i,] <- b - (a * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b))
}
w_update <- matrix(nrow = nrow(x), ncol = ncol(x))
b_update <- matrix(nrow = nrow(x), ncol = 1)
foreach(i = 1:ncol(x), .export = c('sigmoid','sigmoid_prime')) %dopar% {
y_hat[i] <- sigmoid(sum(x[i,]*w)+b)
w_update[i,] <- w - (a * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b) * x[i,])
b_update[i,] <- b - (a * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b))
}
foreach(i = 1:ncol(x)) %dopar% {
y_hat[i] <- sigmoid(sum(x[i,]*w)+b)
w_update[i,] <- w - (a * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b) * x[i,])
b_update[i,] <- b - (a * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b))
}
w_update <- matrix(nrow = nrow(x), ncol = ncol(x))
b_update <- matrix(nrow = nrow(x), ncol = 1)
foreach(i = 1:ncol(x)) %dopar% {
y_hat[i] <- sigmoid(sum(x[i,]*w)+b)
w_update[i,] <- w - (a * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b) * x[i,])
b_update[i,] <- b - (a * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b))
}
w_update
b_update
w
w <- round(rnorm(ncol(x)), 3)
b <- round(rnorm(1), 3)
w_update <- matrix(nrow = nrow(x), ncol = ncol(x))
b_update <- matrix(nrow = nrow(x), ncol = 1)
w_update
b_update
w
foreach(i = 1:ncol(x)) %dopar% {
y_hat[i] <- sigmoid(sum(x[i,]*w)+b)
w_update[i,] <- w - (a * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b) * x[i,])
b_update[i,] <- b - (a * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b))
}
foreach(i = 1:ncol(x)) %dopar% {
y_hat[i] <- sigmoid(sum(x[i,]*w)+b)
w_update[i,] <- w - (a * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b) * x[i,])
b_update[i,] <- b - (a * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b))
}
b_update
b_update[1, ] <- 3
b_update
w_update[1,] <- w - (a * (y_hat[1] - y[1]) * sigmoid_prime(sum(x[1,]*w)+b) * x[1,])
w_update
w - (a * (y_hat[1] - y[1]) * sigmoid_prime(sum(x[1,]*w)+b) * x[1,])
w_update
w_update <- matrix(nrow = nrow(x), ncol = ncol(x))
w_update
w_update[1,] <- w - (a * (y_hat[1] - y[1]) * sigmoid_prime(sum(x[1,]*w)+b) * x[1,])
w_update
w - (a * (y_hat[1] - y[1]) * sigmoid_prime(sum(x[1,]*w)+b) * x[1,])
c(w - (a * (y_hat[1] - y[1]) * sigmoid_prime(sum(x[1,]*w)+b) * x[1,]))
w <- round(rnorm(ncol(x)), 3)
b <- round(rnorm(1), 3)
w_update <- matrix(nrow = nrow(x), ncol = ncol(x))
b_update <- matrix(nrow = nrow(x), ncol = 1)
w_update <- c(w - (a * (y_hat[1] - y[1]) * sigmoid_prime(sum(x[1,]*w)+b) * x[1,]))
w_update
w <- round(rnorm(ncol(x)), 3)
b <- round(rnorm(1), 3)
w_update <- matrix(nrow = nrow(x), ncol = ncol(x))
b_update <- matrix(nrow = nrow(x), ncol = 1)
w_update[1,] <- c(w - (a * (y_hat[1] - y[1]) * sigmoid_prime(sum(x[1,]*w)+b) * x[1,]))
w_update
w_update[1,] <- matrix(w - (a * (y_hat[1] - y[1]) * sigmoid_prime(sum(x[1,]*w)+b) * x[1,]))
w <- round(rnorm(ncol(x)), 3)
b <- round(rnorm(1), 3)
w_update <- matrix(nrow = nrow(x), ncol = ncol(x))
b_update <- matrix(nrow = nrow(x), ncol = 1)
w_update
b_update[1, ] <- 3
w_update[1,] <- w - (a * (y_hat[1] - y[1]) * sigmoid_prime(sum(x[1,]*w)+b) * x[1,])
w_update
w <- round(rnorm(ncol(x)), 3)
b <- round(rnorm(1), 3)
w_update <- matrix(nrow = nrow(x), ncol = ncol(x))
b_update <- matrix(nrow = nrow(x), ncol = 1)
w_update
w_update[1,] <- matrix(w - (a * (y_hat[1] - y[1]) * sigmoid_prime(sum(x[1,]*w)+b) * x[1,]), nrow = 1, ncol = length(w))
w_update
w - (a * (y_hat[1] - y[1]) * sigmoid_prime(sum(x[1,]*w)+b) * x[1,])
str(w - (a * (y_hat[1] - y[1]) * sigmoid_prime(sum(x[1,]*w)+b) * x[1,]))
list(w - (a * (y_hat[1] - y[1]) * sigmoid_prime(sum(x[1,]*w)+b) * x[1,]))
w <- round(rnorm(ncol(x)), 3)
b <- round(rnorm(1), 3)
w_update <- matrix(nrow = nrow(x), ncol = ncol(x))
b_update <- matrix(nrow = nrow(x), ncol = 1)
w_update <- list(w - (a * (y_hat[1] - y[1]) * sigmoid_prime(sum(x[1,]*w)+b) * x[1,]))
w_update
w <- round(rnorm(ncol(x)), 3)
b <- round(rnorm(1), 3)
w_update <- matrix(nrow = nrow(x), ncol = ncol(x))
b_update <- matrix(nrow = nrow(x), ncol = 1)
w_update[1,] <- list(w - (a * (y_hat[1] - y[1]) * sigmoid_prime(sum(x[1,]*w)+b) * x[1,]))
w_update
w <- round(rnorm(ncol(x)), 3)
b <- round(rnorm(1), 3)
w_update <- matrix(nrow = nrow(x), ncol = ncol(x))
b_update <- matrix(nrow = nrow(x), ncol = 1)
w_update[1,] <- w - (a * (y_hat[1] - y[1]) * sigmoid_prime(sum(x[1,]*w)+b) * x[1,])
w_update
w - (a * (y_hat[1] - y[1]) * sigmoid_prime(sum(x[1,]*w)+b) * x[1,])
w - (a * (y_hat[1] - y[1]) * sigmoid_prime(sum(x[1,]*w)+b) * x[1,])[1,]
w <- round(rnorm(ncol(x)), 3)
b <- round(rnorm(1), 3)
w_update <- matrix(nrow = nrow(x), ncol = ncol(x))
b_update <- matrix(nrow = nrow(x), ncol = 1)
w_update[1,] <- w - (a * (y_hat[1] - y[1]) * sigmoid_prime(sum(x[1,]*w)+b) * x[1,])[1,]
w_update
w <- round(rnorm(ncol(x)), 3)
b <- round(rnorm(1), 3)
w_update <- matrix(nrow = nrow(x), ncol = ncol(x))
b_update <- matrix(nrow = nrow(x), ncol = 1)
w_update[1,] <- (w - (a * (y_hat[1] - y[1]) * sigmoid_prime(sum(x[1,]*w)+b) * x[1,]))
w_update
(w - (a * (y_hat[1] - y[1]) * sigmoid_prime(sum(x[1,]*w)+b) * x[1,])[1,])
(w - (a * (y_hat[1] - y[1]) * sigmoid_prime(sum(x[1,]*w)+b) * x[1,]))[1,]
w - (a * (y_hat[1] - y[1]) * sigmoid_prime(sum(x[1,]*w)+b) * x[1,])
c(w - (a * (y_hat[1] - y[1]) * sigmoid_prime(sum(x[1,]*w)+b) * x[1,]))
w <- round(rnorm(ncol(x)), 3)
b <- round(rnorm(1), 3)
w_update <- matrix(nrow = nrow(x), ncol = ncol(x))
b_update <- matrix(nrow = nrow(x), ncol = 1)
w_update[1,] <- c(w - (a * (y_hat[1] - y[1]) * sigmoid_prime(sum(x[1,]*w)+b) * x[1,]))
w_update
w <- round(rnorm(ncol(x)), 3)
b <- round(rnorm(1), 3)
w_update <- matrix(nrow = nrow(x), ncol = ncol(x))
b_update <- matrix(nrow = nrow(x), ncol = 1)
w_update[1,] <- matrix(w - (a * (y_hat[1] - y[1]) * sigmoid_prime(sum(x[1,]*w)+b) * x[1,]))
w_update <- matrix(nrow = nrow(x), ncol = ncol(x))
b_update <- matrix(nrow = nrow(x), ncol = 1)
w_update[1,] <- matrix(w - (a * (y_hat[1] - y[1]) * sigmoid_prime(sum(x[1,]*w)+b) * x[1,]))
w_update
w_update <- matrix(nrow = nrow(x), ncol = ncol(x))
b_update <- matrix(nrow = nrow(x), ncol = 1)
w_update
w - (a * (y_hat[1] - y[1]) * sigmoid_prime(sum(x[1,]*w)+b) * x[1,])
w_update <- data.frame(matrix(nrow = nrow(x), ncol = ncol(x)))
w_update
w_update[1,] <- w - (a * (y_hat[1] - y[1]) * sigmoid_prime(sum(x[1,]*w)+b) * x[1,])
w_update
w_update <- data.frame(rnorm(24),matrix(nrow = nrow(x), ncol = ncol(x)))
w_update
w_update <- data.frame(matrix(rnorm(24),nrow = nrow(x), ncol = ncol(x)))
b_update <- matrix(nrow = nrow(x), ncol = 1)
w_update
apply(w_update,2,mean)
setting_w_and_b <- function(a,x,y,i,e_max){
y_hat <- c()
p <- nrow(x)
w <- round(rnorm(ncol(x)), 3)
b <- round(rnorm(1), 3)
w_update <- data.frame(matrix(nrow = nrow(x), ncol = ncol(x)))
b_update <- matrix(nrow = nrow(x), ncol = 1)
n_iteration <- 1
max_iteration <- i
y_hat <- 9999
e <- 9999
while(e > e_max && n_iteration <= max_iteration){
foreach(i = i:ncol(x), .export = c('sigmoid','sigmoid_prime')) %dopar% {
y_hat[i] <- sigmoid(sum(x[i,]*w)+b)
w_update[i,] <- w - (a * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b) * x[i,])
b_update[i,] <- b - (a * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b))
}
e <- 1/length(y_hat) * 1/2 * sum((y_hat - y)^2)
w <- apply(w_update, 2, mean)
b <- apply(b_update, 2, mean)
n_iteration <- n_iteration + 1
}
return(list(n_iteration-1,w,b))
}
result <- setting_w_and_b(0.1,x,y,100,0.001)
setting_w_and_b <- function(a,x,y,i,e_max){
y_hat <- c()
p <- nrow(x)
w <- round(rnorm(ncol(x)), 3)
b <- round(rnorm(1), 3)
w_update <- data.frame(matrix(nrow = nrow(x), ncol = ncol(x)))
b_update <- matrix(nrow = nrow(x), ncol = 1)
n_iteration <- 1
max_iteration <- i
y_hat <- 9999
e <- 9999
while(e > e_max && n_iteration <= max_iteration){
foreach(i = 1:ncol(x), .export = c('sigmoid','sigmoid_prime')) %dopar% {
y_hat[i] <- sigmoid(sum(x[i,]*w)+b)
w_update[i,] <- w - (a * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b) * x[i,])
b_update[i,] <- b - (a * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b))
}
e <- 1/length(y_hat) * 1/2 * sum((y_hat - y)^2)
w <- apply(w_update, 2, mean)
b <- apply(b_update, 2, mean)
n_iteration <- n_iteration + 1
}
return(list(n_iteration-1,w,b))
}
result <- setting_w_and_b(0.1,x,y,100,0.001)
result
y_hat <- c()
p <- nrow(x)
w <- round(rnorm(ncol(x)), 3)
b <- round(rnorm(1), 3)
w_update <- data.frame(matrix(nrow = nrow(x), ncol = ncol(x)))
b_update <- matrix(nrow = nrow(x), ncol = 1)
n_iteration <- 1
max_iteration <- i
y_hat <- 9999
e <- 9999
while(e > e_max && n_iteration <= max_iteration){
foreach(i = 1:ncol(x), .export = c('sigmoid','sigmoid_prime')) %dopar% {
y_hat[i] <- sigmoid(sum(x[i,]*w)+b)
w_update[i,] <- w - (a * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b) * x[i,])
b_update[i,] <- b - (a * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b))
}
e <- 1/length(y_hat) * 1/2 * sum((y_hat - y)^2)
w <- apply(w_update, 2, mean)
b <- apply(b_update, 2, mean)
n_iteration <- n_iteration + 1
}
e_max <- 0.1
while(e > e_max && n_iteration <= max_iteration){
foreach(i = 1:ncol(x), .export = c('sigmoid','sigmoid_prime')) %dopar% {
y_hat[i] <- sigmoid(sum(x[i,]*w)+b)
w_update[i,] <- w - (a * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b) * x[i,])
b_update[i,] <- b - (a * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b))
}
e <- 1/length(y_hat) * 1/2 * sum((y_hat - y)^2)
w <- apply(w_update, 2, mean)
b <- apply(b_update, 2, mean)
n_iteration <- n_iteration + 1
}
y_hat <- c()
p <- nrow(x)
w <- round(rnorm(ncol(x)), 3)
b <- round(rnorm(1), 3)
w_update <- data.frame(matrix(nrow = nrow(x), ncol = ncol(x)))
b_update <- matrix(nrow = nrow(x), ncol = 1)
n_iteration <- 1
max_iteration <- i
y_hat <- 9999
e <- 9999
e_max <- 0.1
while(e > e_max && n_iteration <= max_iteration){
foreach(i = 1:ncol(x), .export = c('sigmoid','sigmoid_prime')) %dopar% {
y_hat[i] <- sigmoid(sum(x[i,]*w)+b)
w_update[i,] <- w - (a * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b) * x[i,])
b_update[i,] <- b - (a * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b))
}
e <- 1/length(y_hat) * 1/2 * sum((y_hat - y)^2)
w <- apply(w_update, 2, mean)
b <- apply(b_update, 2, mean)
n_iteration <- n_iteration + 1
}
w_update
w_update[1,] <- w - (a * (y_hat[1] - y[1]) * sigmoid_prime(sum(x[1,]*w)+b) * x[1,])
w_updta
w_update
setting_w_and_b <- function(a,x,y,i,e_max){
y_hat <- c()
p <- nrow(x)
w <- round(rnorm(ncol(x)), 3)
b <- round(rnorm(1), 3)
w_update <- data.frame(matrix(nrow = nrow(x), ncol = ncol(x)))
b_update <- data.frame(matrix(nrow = nrow(x), ncol = 1))
n_iteration <- 1
max_iteration <- i
y_hat <- 9999
e <- 9999
while(e > e_max && n_iteration <= max_iteration){
foreach(i = 1:ncol(x), .export = c('sigmoid','sigmoid_prime')) %dopar% {
y_hat[i] <- sigmoid(sum(x[i,]*w)+b)
w_update[i,] <- w - (a * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b) * x[i,])
b_update[i,] <- b - (a * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b))
}
e <- 1/length(y_hat) * 1/2 * sum((y_hat - y)^2)
w <- apply(w_update, 2, mean)
b <- apply(b_update, 2, mean)
n_iteration <- n_iteration + 1
}
return(list(n_iteration-1,w,b))
}
result <- setting_w_and_b(0.1,x,y,100,0.001)
result
foreach(i = 1:ncol(x)) %dopar% {
y_hat[i] <- sigmoid(sum(x[i,]*w)+b)
w_update[i,] <- w - (a * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b) * x[i,])
b_update[i,] <- b - (a * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b))
}
#-----------------------
w_update
#-----------------------
w_update[1,] <- w - (a * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b) * x[i,])
w_update
#-----------------------
w_update[1,] <- w - (a * (y_hat[1] - y[1]) * sigmoid_prime(sum(x[1,]*w)+b) * x[1,])
w_update
y_hat
y_hat <- c(rnorm(x))
foreach(i = 1:ncol(x)) %dopar% {
y_hat[i] <- sigmoid(sum(x[i,]*w)+b)
w_update[i,] <- w - (a * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b) * x[i,])
b_update[i,] <- b - (a * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b))
}
b_update[1,] <- b - (a * (y_hat[1] - y[1]) * sigmoid_prime(sum(x[1]*w)+b))
b_update
b - (a * (y_hat[1] - y[1]) * sigmoid_prime(sum(x[1]*w)+b))
b - (a * (y_hat[1] - y[1]) * sigmoid_prime(sum(x[1]*w)+b))
b - (a * (y_hat[1] - y[1]) * sigmoid_prime(sum(x[1]*w)+b))
b - (a * (y_hat[1] - y[1]) * sigmoid_prime(sum(x[1]*w)+b))
b - (a * (y_hat[1] - y[1]) * sigmoid_prime(sum(x[1]*w)+b))
b - (a * (y_hat[1] - y[1]) * sigmoid_prime(sum(x[1]*w)+b))
b
b - (a * (y_hat[1] - y[1]) * sigmoid_prime(sum(x[1]*w)+b))
(y_hat[1] - y[1])
sigmoid_prime(sum(x[1]*w)+b)
a
#setting weights and bias of perceptron
#activation function : sigmoid function
#batch learning, parallel computing
# a = learning rate
# x = input data
# y = label
# i = max iteration
# e_max = max error
rm(a)
b - (0.1 * (y_hat[1] - y[1]) * sigmoid_prime(sum(x[1]*w)+b))
b_update[1,] <- b - (0.1 * (y_hat[1] - y[1]) * sigmoid_prime(sum(x[1]*w)+b))
foreach(i = 1:ncol(x)) %dopar% {
y_hat[i] <- sigmoid(sum(x[i,]*w)+b)
w_update[i,] <- w - (0.1 * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b) * x[i,])
b_update[i,] <- b - (0.1 * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b))
}
foreach(i = 1:ncol(x)) %dopar% {
y_hat[i] <- sigmoid(sum(x[i,]*w)+b)
w_update[i,] <- w - (0.1 * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b) * x[i,])
b_update[i,] <- b - (0.1 * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b))
}
w_update
#-----------------------
w_update[1,] <- w - (a * (y_hat[1] - y[1]) * sigmoid_prime(sum(x[1,]*w)+b) * x[1,])
#-----------------------
w_update <- data.frame(matrix(nrow = nrow(x), ncol = ncol(x)))
w_update
foreach(i = 1:ncol(x)) %dopar% {
y_hat[i] <- sigmoid(sum(x[i,]*w)+b)
w_update[i,] <- w - (0.1 * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b) * x[i,])
b_update[i,] <- b - (0.1 * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b))
}
w_update
foreach(i = 1:ncol(x), .combine = 'rbind') %dopar% {
y_hat[i] <- sigmoid(sum(x[i,]*w)+b)
w_update[i,] <- w - (0.1 * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b) * x[i,])
b_update[i,] <- b - (0.1 * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b))
}
w_update
foreach(i = 1:ncol(x), .combine = 'cbind') %dopar% {
y_hat[i] <- sigmoid(sum(x[i,]*w)+b)
w_update[i,] <- w - (0.1 * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b) * x[i,])
b_update[i,] <- b - (0.1 * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b))
}
w_update
foreach(i = 1:ncol(x), .combine = 'cbind') %dopar% {
y_hat[i] <- sigmoid(sum(x[i,]*w)+b)
w_update[i,] <- w - (0.1 * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b) * x[i,])
b_update[i,] <- b - (0.1 * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b))
}
a <- foreach(i = 1:ncol(x), .combine = 'cbind') %dopar% {
y_hat[i] <- sigmoid(sum(x[i,]*w)+b)
w_update[i,] <- w - (0.1 * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b) * x[i,])
b_update[i,] <- b - (0.1 * (y_hat[i] - y[i]) * sigmoid_prime(sum(x[i,]*w)+b))
}
a
